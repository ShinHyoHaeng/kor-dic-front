{"version":3,"sources":["components/Result.js","components/SearchBar.js","components/Keyword.js","components/Search.js","components/NoResults.js","App.js","reportWebVitals.js","index.js"],"names":["Result","seq","keyword","link","hanja","word_class","meaning","className","href","SearchView","word","updateText","onClick","SearchBar","props","renderResults","text","updateField","arr","results","console","log","map","item","id","placeholder","value","onChange","e","target","onKeyPress","ref","textInput","Search","useState","datas","data","Query","setQuery","setResult","queryRef","useRef","setSelected","onSearch","filter","matchName","keyLen","length","toLowerCase","substring","toString","SelectBox","name","options","option","defaultValue","handleInput","field","update","preventDefault","key","keyCode","current","focus","type","NoResults","exceptionType","App","changeName","setState","test","isException","state","loading","words","fetch","then","res","json","result","filterWords","this","includes","_id","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1dc56fcb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Result({seq, keyword, link, hanja, word_class, meaning}) {\r\n    return (\r\n        <div className=\"item move-up\">\r\n            <div className=\"word\">{keyword}<sup>{seq}</sup><p className=\"hanja\">{hanja}</p> <a href={link}>더 보기  &raquo;</a></div>\r\n            <p className=\"description\"><span>{word_class}</span> {meaning}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result\r\n","const SearchBar = (props) => {\r\n    // 자동검색어 클릭했을 경우 검색어 완성\r\n    const updateText = text => {\r\n        // 자동완성 텍스트를 검색어로 변경하고 검색하지 않는다.\r\n        props.updateField(\"keyword\", text, false);\r\n        // 검색결과를 초기화 시켜준다.\r\n        props.updateField(\"results\", []);\r\n    };\r\n    \r\n    var renderResults;\r\n    // 처음엔 빈 배열 / 자동완성 텍스트가 있으면 배열에 텍스트가 채워짐\r\n    const arr = props.results['results'];\r\n    console.log(arr);\r\n    if(arr) {\r\n    // arr 에 검색어에 대한 결과가 담기면, SearchView 호출 \r\n        renderResults = arr.map((item => {\r\n            return (\r\n                <SearchView\r\n                    word={item.word}\r\n                    updateText={updateText}\r\n                />\r\n            );\r\n        }));\r\n    }\r\n\r\n    // onChange를 사용하여 글자를 입력할때마다 updateField호출하고 renderResults를 그린다.\r\n    return (\r\n        <div className=\"col-6 inputArea\">\r\n            <input\r\n                id=\"search\"\r\n                className=\"form-control\"\r\n                placeholder=\"Search\"\r\n                value={props.keyword || ''}\r\n                onChange={e => props.updateField(\"keyword\", e.target.value)}\r\n                onKeyPress={e => props.onKeyPress(e)}\r\n            />\r\n            <div className=\"autocomplete-items\" ref={props.textInput}>{renderResults}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// 검색된 아이템 \"word\" 출력\r\n// 결과값을 클릭하면 updateText를 호출하여 input에 word를 표시\r\nconst SearchView = ({ word, updateText }) => {\r\n    return (\r\n      <div\r\n        onClick={() => updateText(word)}\r\n      >\r\n          {word}\r\n      </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default SearchBar;","const keyword = [\r\n    {\r\n        id: 0,\r\n        word: '학교'\r\n    },\r\n    {\r\n        id: 1,\r\n        word: '학원'\r\n    },\r\n    {\r\n        id: 2,\r\n        word: '소설'\r\n    },\r\n    {\r\n        id: 3,\r\n        word: '수학'\r\n    },\r\n    {\r\n        id: 4,\r\n        word: '역사'\r\n    },\r\n    {\r\n        id: 5,\r\n        word: '가다'\r\n    },\r\n    {\r\n        id: 6,\r\n        word: '나'\r\n    },\r\n    {\r\n        id: 7,\r\n        word: '고리'\r\n    }\r\n]\r\n\r\nexport default keyword;","import { useRef, useState } from 'react/cjs/react.development';\r\nimport SearchBar from './SearchBar';\r\nimport datas from './Keyword';\r\nimport React from 'react';\r\n\r\nconst Search = (props) => {\r\n    // 검색어 자동완성에 쓸 데이터\r\n    const [data, setData] = useState(datas);\r\n    // 입력창에 입력한 텍스트 \r\n    const [Query, setQuery] = useState(\"\"); // value=\"\"와 동일\r\n    // 검색어 자동완성 텍스트\r\n    const [results, setResult] = useState([]);\r\n    const queryRef = useRef();\r\n    const [Selected, setSelected] = useState(\"none\");\r\n    const [exceptionType, setexceptionType] = useState('');\r\n    const [isException, setException] = useState(false);\r\n  \r\n    // 필드를 업데이트 \r\n    const updateField = (field, value, update = true) => {\r\n        // onSearch에 입력창에 입력된 텍스트을 넘긴다.\r\n        if (update) onSearch(value);\r\n        // 필드가 keyword면 keyword값 변경 / results면 results값 변경\r\n        if (field === 'keyword') { setQuery(value); }\r\n        if (field === 'results') { setResult(value); }\r\n    }\r\n  \r\n    // 입력된 텍스트로 data 배열에서 찾아 매칭되는 결과들을 저장 \r\n    const onSearch = text => {\r\n        var results = data.filter(item => true === matchName(item.word, text));\r\n        setResult({ results });\r\n    };\r\n\r\n    // 검색해야할 문자열을 키워드와 비교하여 매칭이 되는지 체크 \r\n    // word는 데이터베이스에 있는 단어 / keyword는 입력한 단어\r\n    const matchName = (word, keyword) => {\r\n        var keyLen = keyword.length;\r\n        // 데이터베이스에 있는 단어를 입력한 텍스트의 개수만큼 자른다.\r\n        word = word.toLowerCase().substring(0, keyLen);\r\n        // 입력된 텍스트가 없으면 false\r\n        if (keyword === \"\") return false;\r\n        // 데이터베이스에 있는 단어 앞부분과 입력된 텍스트를 비교해서 일치하면 true 아니면 false\r\n        return word === keyword.toString().toLowerCase();\r\n    };\r\n\r\n    //select\r\n    const Options = [\r\n        {value:\"none\", name:\"전체\"},\r\n        {value:\"word\", name:\"단어\"},\r\n        {value:\"mean\", name:\"의미\"},\r\n        {value:\"wordclass\", name:\"품사\"}\r\n    ]\r\n    const SelectBox = (props) => {\r\n        const handleSelect = (e) => { \r\n            setSelected(e.target.value);\r\n            console.log(e.target.value);\r\n        }\r\n        return(\r\n            <select name=\"select\" className=\"form-control\" id=\"select\" onChange={handleSelect}>\r\n                {props.options.map((option) => (\r\n                    <option key={option.value} value={option.value} defaultValue={props.defaultValue === option.value}>{option.name}</option>\r\n                ))}\r\n            </select>\r\n        )\r\n    }\r\n\r\n    const onClick = () => {\r\n        props.handleInput(Query)\r\n    }\r\n\r\n    // enter키 이벤트 추가\r\n    const onKeyEvent = (e) => {\r\n        e.preventDefault()\r\n        if(e.key === 'Enter'){\r\n            onClick()\r\n        } else if (e.keyCode === 40) {\r\n            console.log('1')\r\n            queryRef.current.focus()\r\n        } else if (e.key === 'ArrowUp') {\r\n            console.log('2')\r\n            queryRef.current.focus()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"searchInner\">\r\n            <div className=\"col-3 selectArea\">\r\n                {/* Warning: Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>. */}\r\n                <SelectBox options={Options} defaultValue=\"none\"></SelectBox>\r\n            </div>\r\n                <SearchBar keyword={Query} results={results} updateField={updateField} onKeyPress={onKeyEvent} textInput={queryRef}></SearchBar>\r\n                {/* <SearchBar handleChange={(e)=>onFilter(e)} onKeyPress={onKeyEvent}></SearchBar> */}\r\n            <div className=\"col-3 buttonArea\">\r\n                <input \r\n                    type=\"submit\" \r\n                    className=\"form-control\" \r\n                    id=\"submit\" \r\n                    value=\"검색\"\r\n                    onClick={()=>onClick()}\r\n                />\r\n            </div>\r\n        </div>   \r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useState } from 'react'\r\n\r\nfunction NoResults({exceptionType}) {\r\n    if(exceptionType === 'num'){\r\n        return(\r\n            <div className=\"exceptionArea\">\r\n                <p>검색어에 숫자가 들어있습니다.</p>\r\n                <p>다시 검색해주세요.</p>\r\n            </div>\r\n        )\r\n    }\r\n    else if(exceptionType==='eng'){\r\n        return(\r\n            <div className=\"exceptionArea\">\r\n                <p>검색어에 영어가 들어있습니다.</p>\r\n                <p>다시 검색해주세요.</p>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return(\r\n            <div className='exceptionArea'>\r\n                <p>검색어에 특수문자가 들어있습니다.</p>\r\n                <p>다시 검색해주세요.</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NoResults\r\n","import './App.css'\r\nimport React, {Component, useState, useRef} from 'react';\r\nimport Result from './components/Result'\r\nimport Search from './components/Search'\r\nimport NoResults from './components/NoResults';\r\n\r\nclass App extends Component{\r\n  \r\n  // 생성자 함수\r\n  constructor(props){\r\n      console.log('constructor')\r\n      super(props)\r\n      this.state = {\r\n          loading:true,\r\n          words:[],\r\n          Query:'',\r\n          isException:false,\r\n          exceptionType:''\r\n      }\r\n  }\r\n\r\n  // 이벤트 핸들러 함수\r\n  changeName = () => {\r\n      this.setState({name:\"name changed\"})\r\n  }\r\n\r\n  // 컴포넌트가 생성되었을 때\r\n  componentDidMount(){\r\n      const BASE_URL = 'https://dictionary-search-haeng.herokuapp.com/api/words';\r\n      console.log(\"mount\")\r\n      console.log(\"-----------------\")\r\n      // 서버에서 데이터 가져오기\r\n      fetch(BASE_URL)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n          console.log(result)\r\n          const {words} = result\r\n          this.setState({loading: false, words})\r\n      })\r\n  }\r\n\r\n  // 컴포넌트가 업데이트 되었을 때\r\n  componentDidUpdate(){\r\n      console.log(\"update\")\r\n  }\r\n\r\n  // 컴포넌트가 제거되었을 때\r\n  componentWillUnmount(){\r\n      console.log(\"unmount\")\r\n  }\r\n\r\n    // input에 입력하자마자 검색\r\n    // handleInput = (e) => {\r\n    //     this.setState({Query: e.target.value});\r\n    // }\r\n\r\n    // input에 입력한 값을 버튼 클릭시 동작하도록 하는 이벤트\r\n    handleInput = (keyword) => {\r\n        if(/[a-z]/i.test(keyword))\r\n        this.setState({Query:'',isException:true,exceptionType:'eng'})\r\n        else if(/\\d/.test(keyword))\r\n        this.setState({Query:'',isException:true,exceptionType:'num'})\r\n        else if(/[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|.<>\\/?~]/.test(keyword))\r\n        this.setState({Query:'',isException:true,exceptionType:'str'})\r\n        else\r\n        this.setState({Query: keyword,isException:false});\r\n    }\r\n\r\n  render(){\r\n\r\n    const Query = this.state;\r\n    const filterWords = this.state.words.filter((word)=>\r\n        word.keyword.includes(this.state.Query)\r\n        || word.meaning.includes(this.state.Query)\r\n        || word.word_class.includes(this.state.Query)\r\n    );\r\n    \r\n\r\n      const {loading, words, exceptionType, isException} = this.state\r\n      if(loading){ // loading의 상태값이 true이면\r\n          return(\r\n              <div>\r\n                  <h1>loading...</h1>\r\n              </div>\r\n          )\r\n      }else{\r\n          return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"searchArea\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <Search handleInput={this.handleInput}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"resultArea\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"resultInner\" id=\"result\" >\r\n                            {\r\n                                    isException?(\r\n                                        <NoResults exceptionType={exceptionType}/>\r\n                                    ):(filterWords.map(word => {\r\n                                        return(\r\n                                            <Result\r\n                                            key={word._id}\r\n                                            seq={word.seq}\r\n                                            keyword={word.keyword}\r\n                                            link={word.link}\r\n                                            hanja={word.hanja}\r\n                                            word_class={word.word_class}\r\n                                            meaning={word.meaning}\r\n                                            >\r\n                                            </Result>\r\n                                        )\r\n                                    }))\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          )\r\n      } \r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}