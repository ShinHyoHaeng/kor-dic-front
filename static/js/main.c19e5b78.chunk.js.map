{"version":3,"sources":["components/Result.js","components/SearchBar.js","components/Keyword.js","components/Search.js","components/NoResults.js","App.js","reportWebVitals.js","index.js"],"names":["Result","seq","keyword","link","hanja","word_class","meaning","className","href","ArrowForward","SearchView","word","updateText","onClick","SearchBar","props","renderResults","text","updateField","arr","results","console","log","map","item","id","placeholder","value","onChange","e","target","onKeyPress","ref","textInput","Search","useState","Query","setQuery","setResult","Selected","setSelected","queryRef","useRef","onSearch","datas","filter","matchName","keyLen","length","toLowerCase","substring","toString","SelectBox","name","options","defaultValue","handleInput","changefilter","field","update","key","keyCode","current","focus","onKeyEvent","type","NoResults","exceptionType","Error","App","changeName","setState","test","isException","selected","state","loading","words","fetch","then","res","json","result","filterWords","this","includes","_id","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c19e5b78.chunk.js","sourcesContent":["import { ArrowForward } from '@material-ui/icons'\r\nimport React from 'react'\r\n\r\nfunction Result({seq, keyword, link, hanja, word_class, meaning}) {\r\n    return (\r\n        <div className=\"item move-up\">\r\n            <div className=\"word\">{keyword}<sup>{seq}</sup><p className=\"hanja\">{hanja}</p> <a href={link}>상세 정보 <ArrowForward className=\"icon\"/></a></div>\r\n            <p className=\"description\"><span>{word_class}</span> {meaning}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result\r\n","const SearchBar = (props) => {\r\n    // 자동검색어 클릭했을 경우 검색어 완성\r\n    const updateText = text => {\r\n        // 자동완성 텍스트를 검색어로 변경하고 검색하지 않는다.\r\n        props.updateField(\"keyword\", text, false);\r\n        // 검색결과를 초기화 시켜준다.\r\n        props.updateField(\"results\", []);\r\n    };\r\n    \r\n    var renderResults;\r\n    // 처음엔 빈 배열 / 자동완성 텍스트가 있으면 배열에 텍스트가 채워짐\r\n    const arr = props.results['results'];\r\n    console.log(arr);\r\n    if(arr) {\r\n    // arr 에 검색어에 대한 결과가 담기면, SearchView 호출 \r\n        renderResults = arr.map((item => {\r\n            return (\r\n                <SearchView\r\n                    word={item.word}\r\n                    updateText={updateText}\r\n                />\r\n            );\r\n        }));\r\n    }\r\n\r\n    // onChange를 사용하여 글자를 입력할때마다 updateField호출하고 renderResults를 그린다.\r\n    return (\r\n        <div className=\"col-6 inputArea\">\r\n            <input\r\n                id=\"search\"\r\n                className=\"form-control\"\r\n                placeholder=\"검색어를 입력하세요\"\r\n                value={props.keyword || ''}\r\n                onChange={e => props.updateField(\"keyword\", e.target.value)}\r\n                onKeyPress={e => props.onKeyPress(e)}\r\n            />\r\n            <div className={`autocomplete-items ${props.keyword ? 'active':''}`} ref={props.textInput}>{renderResults}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// 검색된 아이템 \"word\" 출력\r\n// 결과값을 클릭하면 updateText를 호출하여 input에 word를 표시\r\nconst SearchView = ({ word, updateText }) => {\r\n    return (\r\n      <div\r\n        onClick={() => updateText(word)}\r\n      >\r\n          {word}\r\n      </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default SearchBar;","const keyword = [\r\n    {\r\n        id: 0,\r\n        word: '학교'\r\n    },\r\n    {\r\n        id: 1,\r\n        word: '학원'\r\n    },\r\n    {\r\n        id: 2,\r\n        word: '소설'\r\n    },\r\n    {\r\n        id: 3,\r\n        word: '수학'\r\n    },\r\n    {\r\n        id: 4,\r\n        word: '역사'\r\n    },\r\n    {\r\n        id: 5,\r\n        word: '가다'\r\n    },\r\n    {\r\n        id: 6,\r\n        word: '나'\r\n    },\r\n    {\r\n        id: 7,\r\n        word: '고리'\r\n    }\r\n]\r\n\r\nexport default keyword;","import { useRef, useState } from 'react/cjs/react.development';\r\nimport SearchBar from './SearchBar';\r\nimport datas from './Keyword.js';\r\n\r\nconst Search = (props) => {\r\n    // 입력창에 입력한 텍스트 \r\n    const [Query, setQuery] = useState(\"\"); // value=\"\"와 동일\r\n    const [results, setResult] = useState([]); // 검색어 자동완성 텍스트\r\n    const [Selected, setSelected] = useState(\"none\");\r\n    const queryRef = useRef();\r\n  \r\n    // 필드를 업데이트 \r\n    const updateField = (field, value, update = true) => {\r\n        if (update) onSearch(value); // onSearch에 입력창에 입력된 텍스트을 넘긴다.\r\n        if (field === 'keyword') { setQuery(value); } // 필드가 keyword면 keyword값 변경 / results면 results값 변경\r\n        if (field === 'results') { setResult(value); }\r\n    }\r\n  \r\n    // 입력된 텍스트로 data 배열에서 찾아 매칭되는 결과들을 저장 \r\n    const onSearch = text => {\r\n        var results = datas.filter(item => true === matchName(item.word, text));\r\n        setResult({ results });\r\n    };\r\n\r\n    // 검색해야할 문자열을 키워드와 비교하여 매칭이 되는지 체크 \r\n    const matchName = (word, keyword) => {  // word는 데이터베이스에 있는 단어 / keyword는 입력한 단어\r\n        var keyLen = keyword.length;\r\n        word = word.toLowerCase().substring(0, keyLen); // 데이터베이스에 있는 단어를 입력한 텍스트의 개수만큼 자른다.\r\n        if (keyword === \"\") return false; // 입력된 텍스트가 없으면 false\r\n        return word === keyword.toString().toLowerCase(); // 데이터베이스에 있는 단어 앞부분과 입력된 텍스트를 비교해서 일치하면 true 아니면 false\r\n    };\r\n    const Options = [\r\n        {value:\"none\", name:\"전체\"},\r\n        {value:\"word\", name:\"단어\"},\r\n        {value:\"mean\", name:\"의미\"},\r\n        {value:\"wordclass\", name:\"품사\"}\r\n    ]\r\n    //select\r\n    const SelectBox = (props) => {\r\n        const handleSelect = (e) => {\r\n            setSelected(e.target.value)\r\n            console.log(e.target.value);\r\n        }\r\n        return(\r\n            <select value={Selected} name=\"select\" className=\"form-control\" id=\"select\" onChange={handleSelect}>\r\n                {props.options.map((options) => (\r\n                    <option key={options.value} value={options.value} defaultValue={props.defaultValue === options.value}>{options.name}</option>\r\n                ))}\r\n            </select>\r\n        )\r\n    }\r\n\r\n    const onClick = () => {\r\n        props.handleInput(Query)\r\n        props.changefilter(Selected)\r\n    }\r\n\r\n    // enter키 이벤트 추가\r\n    const onKeyEvent = (e) => {\r\n        if(e.key === 'Enter'){\r\n            onClick()\r\n        } else if (e.keyCode === 40) {\r\n            console.log('1')\r\n            queryRef.current.focus()\r\n        } else if (e.keyCode === 38) {\r\n            console.log('2')\r\n            queryRef.current.focus()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"searchInner\">\r\n            <div className=\"col-3 selectArea\">\r\n                <SelectBox options={Options} defaultValue=\"none\"></SelectBox>\r\n            </div>\r\n                <SearchBar keyword={Query} results={results} updateField={updateField} onKeyPress={e => onKeyEvent(e)} textInput={queryRef}></SearchBar>\r\n                {/* <SearchBar handleChange={(e)=>onFilter(e)} onKeyPress={onKeyEvent}></SearchBar> */}\r\n            <div className=\"col-3 buttonArea\">\r\n                <input \r\n                    type=\"submit\" \r\n                    className=\"form-control\" \r\n                    id=\"submit\" \r\n                    value=\"검색\"\r\n                    onClick={()=>onClick()}\r\n                />\r\n            </div>\r\n        </div>   \r\n    );\r\n}\r\n\r\nexport default Search;","import { Error } from '@material-ui/icons'\r\nimport React from 'react'\r\n\r\nfunction NoResults({exceptionType}) {\r\n    if(exceptionType === 'num'){\r\n        return(\r\n            <div className=\"exceptionArea\">\r\n                <Error className=\"icon\"/>\r\n                <p>검색어에 <span>숫자</span>가 들어있습니다.</p>\r\n                <p>다시 검색해주세요.</p>\r\n            </div>\r\n        )\r\n    }\r\n    else if(exceptionType==='eng'){\r\n        return(\r\n            <div className=\"exceptionArea\">\r\n                <Error className=\"icon\"/>\r\n                <p>검색어에 <span>영어</span>가 들어있습니다.</p>\r\n                <p>다시 검색해주세요.</p>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return(\r\n            <div className='exceptionArea'>\r\n                <Error className=\"icon\"/>\r\n                <p>검색어에 <span>특수문자</span>가 들어있습니다.</p>\r\n                <p>다시 검색해주세요.</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NoResults","import './App.css'\r\nimport React, {Component} from 'react';\r\nimport Result from './components/Result'\r\nimport Search from './components/Search'\r\nimport NoResults from './components/NoResults';\r\n\r\nclass App extends Component{\r\n\r\n  \r\n    // 생성자 함수\r\n    constructor(props){\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            loading:true,\r\n            words:[],\r\n            Query:'',\r\n            isException:false,\r\n            exceptionType:'',\r\n            selected: 'none'\r\n        }\r\n    }\r\n\r\n    // 이벤트 핸들러 함수\r\n    changeName = () => {\r\n        this.setState({name:\"name changed\"})\r\n    }\r\n\r\n    // 컴포넌트가 생성되었을 때\r\n    componentDidMount(){\r\n        const BASE_URL = 'https://dictionary-search-haeng.herokuapp.com/api/words';\r\n        console.log(\"mount\")\r\n        console.log(\"-----------------\")\r\n        // 서버에서 데이터 가져오기\r\n        fetch(BASE_URL)\r\n        .then(res => res.json())\r\n        .then(result => {\r\n            console.log(result)\r\n            const {words} = result\r\n            this.setState({loading: false, words})\r\n        })\r\n    }\r\n\r\n    // 컴포넌트가 업데이트 되었을 때\r\n    componentDidUpdate(){\r\n        console.log(\"update\")\r\n    }\r\n\r\n    // 컴포넌트가 제거되었을 때\r\n    componentWillUnmount(){\r\n        console.log(\"unmount\")\r\n    }\r\n\r\n    // input에 입력하자마자 검색\r\n    // handleInput = (e) => {\r\n    //     this.setState({Query: e.target.value});\r\n    // }\r\n\r\n    // input에 입력한 값을 버튼 클릭시 동작하도록 하는 이벤트\r\n    handleInput = (keyword) => {\r\n        if(/[a-z]/i.test(keyword))\r\n        this.setState({Query:'',isException:true,exceptionType:'eng'})\r\n        else if(/\\d/.test(keyword))\r\n        this.setState({Query:'',isException:true,exceptionType:'num'})\r\n        else if(/[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|.<>\\/?~]/.test(keyword))\r\n        this.setState({Query:'',isException:true,exceptionType:'str'})\r\n        else\r\n        this.setState({Query: keyword,isException:false});\r\n    }\r\n\r\n    changefilter = (selected) => {\r\n        if (selected === 'none') {\r\n            this.setState({selected: 'none'})\r\n        } else if (selected === 'word') {\r\n            this.setState({selected: 'word'})\r\n        } else if (selected === 'mean') {\r\n            this.setState({selected: 'mean'})\r\n        } else if (selected === 'wordclass') {\r\n            this.setState({selected: 'wordclass'})\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let filterWords;\r\n        const {loading, selected, exceptionType, isException} = this.state\r\n        if (selected === 'none') {\r\n            filterWords = this.state.words.filter((word)=>\r\n                word.keyword.includes(this.state.Query)\r\n                || word.meaning.includes(this.state.Query)\r\n                || word.word_class.includes(this.state.Query)\r\n            );\r\n        } else if (selected === 'word') {\r\n            filterWords = this.state.words.filter((word)=>\r\n                word.keyword.includes(this.state.Query)\r\n            );\r\n        } else if (selected === 'mean') {\r\n            filterWords = this.state.words.filter((word)=>\r\n                word.meaning.includes(this.state.Query)\r\n            );\r\n        } else if (selected === 'wordclass') {\r\n            filterWords = this.state.words.filter((word)=>\r\n                word.word_class.includes(this.state.Query)\r\n            );\r\n        }\r\n        \r\n\r\n        if(loading){ // loading의 상태값이 true이면\r\n            return(\r\n                <div className=\"loaderWrapper\">\r\n                    <div className=\"loader\">loading...</div>\r\n                </div>\r\n            )\r\n        }else{\r\n            return (\r\n                <div className=\"wrapper\">\r\n                    <div className=\"searchArea\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <Search handleInput={this.handleInput} changefilter={this.changefilter}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"resultArea\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"resultInner\" id=\"result\" >\r\n                                {\r\n                                        isException?(\r\n                                            <NoResults exceptionType={exceptionType}/>\r\n                                        ):(filterWords.map(word => {\r\n                                            return(\r\n                                                <Result\r\n                                                key={word._id}\r\n                                                seq={word.seq}\r\n                                                keyword={word.keyword}\r\n                                                link={word.link}\r\n                                                hanja={word.hanja}\r\n                                                word_class={word.word_class}\r\n                                                meaning={word.meaning}\r\n                                                >\r\n                                                </Result>\r\n                                            )\r\n                                        }))\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } \r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}