{"version":3,"sources":["components/Result.js","components/SearchBar.js","components/Search.js","components/NoResults.js","App.js","reportWebVitals.js","index.js"],"names":["Result","seq","keyword","link","hanja","word_class","meaning","className","href","ArrowForward","SearchView","word","updateText","textInput","autocomplete","onClick","ref","SearchBar","renderResults","results","Selected","updateField","onKeyDown","text","arr","map","item","idx","el","current","id","placeholder","value","onChange","e","target","Search","words","handleInput","changeSelected","useState","Query","setQuery","setResult","setSelected","setIdx","queryRef","useRef","onSearch","datas","filter","findIndex","matchName","keyLen","length","toLowerCase","substring","toString","SelectBox","options","defaultValue","name","console","log","field","update","num","key","click","keyCode","nextIndex","decreaseIndex","focus","increaseIndex","innerHTML","type","NoResults","exceptionType","Error","App","props","test","setState","isException","selected","state","loading","fetch","then","res","json","result","filterWords","this","includes","_id","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b0caac0.chunk.js","sourcesContent":["import { ArrowForward } from '@material-ui/icons'\r\nimport React from 'react'\r\n\r\nfunction Result({seq, keyword, link, hanja, word_class, meaning}) {\r\n    return (\r\n        <div className=\"item move-up\">\r\n            <div className=\"word\">{keyword}<sup>{seq}</sup><p className=\"hanja\">{hanja}</p> <a href={link}>상세 정보 <ArrowForward className=\"icon\"/></a></div>\r\n            <p className=\"description\"><span>{word_class}</span> {meaning}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result\r\n","import React from \"react\";\r\n\r\nconst SearchBar = ({keyword, results, Selected, updateField, onKeyDown, textInput, autocomplete}) => { \r\n    const updateText = text => { // 자동검색어 클릭했을 경우 검색어 완성\r\n        updateField(\"keyword\", text, false); // 자동완성 텍스트를 검색어로 변경하고 검색하지 않는다.\r\n        updateField(\"results\", []); // 검색결과를 초기화 시켜준다.\r\n    };\r\n    \r\n    var renderResults;\r\n    const arr = results['results']; // 처음엔 빈 배열 / 자동완성 텍스트가 있으면 배열에 텍스트가 채워짐\r\n    if(arr) {\r\n\r\n        renderResults = arr.map(((item, idx) => { // arr 에 검색어에 대한 결과가 담기면, SearchView 호출 \r\n            return (\r\n                Selected === 'wordclass' ? \r\n                <SearchView\r\n                    key={idx}\r\n                    word={item.word_class}\r\n                    updateText={updateText}\r\n                    textInput={el => textInput.current[idx] = el}\r\n                    autocomplete={autocomplete}\r\n                />\r\n                :\r\n                <SearchView\r\n                    key={idx}\r\n                    word={item.keyword}\r\n                    updateText={updateText}\r\n                    textInput={el => textInput.current[idx] = el}\r\n                    autocomplete={autocomplete}\r\n                />\r\n            );\r\n        }));\r\n    }\r\n\r\n    // onChange를 사용하여 글자를 입력할때마다 updateField호출하고 renderResults를 그린다.\r\n    return (\r\n        <div className=\"col-6 inputArea\">\r\n            <input\r\n                id=\"search\"\r\n                className=\"form-control\"\r\n                placeholder=\"검색어를 입력하세요\"\r\n                value={keyword || ''}\r\n                onChange={e => updateField(\"keyword\", e.target.value)}\r\n                onKeyDown={e => onKeyDown(e, results['results'] ? results['results']:0)}\r\n            />\r\n            <div className={`autocomplete-items ${keyword ? 'active':''}`} >{renderResults}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// 검색된 아이템 \"word\" 출력: 결과값을 클릭하면 updateText를 호출하여 input에 word를 표시\r\nconst SearchView = ({ word, updateText, textInput, autocomplete}) => {\r\n    return (\r\n      <div className={`autocomplete-item ${word === autocomplete ? 'active':''}`} onClick={() => updateText(word)} ref={textInput}>{word}</div>\r\n    //   <div className='autocomplete-item' onClick={() => updateText(word)} ref={textInput} tabindex=\"0\">{word}</div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default SearchBar;","import { useRef, useState } from 'react';\r\nimport SearchBar from './SearchBar';\r\n\r\nconst Search = ({words, handleInput, changeSelected}) => {\r\n    // 입력창에 입력한 텍스트 \r\n    const [Query, setQuery] = useState(\"\"); // value=\"\"와 동일\r\n    const [results, setResult] = useState([]); // 검색어 자동완성 텍스트\r\n    const [Selected, setSelected] = useState(\"none\");\r\n    const [idx, setIdx] = useState(0);\r\n    const queryRef = useRef([]);\r\n  \r\n    // 필드를 업데이트 \r\n    const updateField = (field, value, update = true) => {\r\n        if (update) onSearch(value); // onSearch에 입력창에 입력된 텍스트을 넘긴다.\r\n        if (field === 'keyword') { setQuery(value); } // 필드가 keyword면 keyword값 변경 / results면 results값 변경\r\n        if (field === 'results') { setResult(value); }\r\n    }\r\n    \r\n    // 입력된 텍스트로 data 배열에서 찾아 매칭되는 결과들을 저장 \r\n    const onSearch = text => {\r\n        if (Selected === 'none' || Selected === 'word') {\r\n            const datas = words.filter((word, idx, arr) => {\r\n                return arr.findIndex((item) => item.keyword === word.keyword) === idx\r\n            });\r\n            var results = datas.filter(item => {\r\n                return true === matchName(item.keyword, text)\r\n            });\r\n            setResult({ results });\r\n        } else if (Selected === 'wordclass') {\r\n            const datas = words.filter((word, idx, arr) => {\r\n                return arr.findIndex((item) => item.word_class === word.word_class) === idx\r\n            });\r\n            var results = datas.filter(item => {\r\n                return true === matchName(item.word_class, text)\r\n            });\r\n            setResult({ results });\r\n        }\r\n    };\r\n\r\n    // 검색해야할 문자열을 키워드와 비교하여 매칭이 되는지 체크 \r\n    const matchName = (word, keyword) => {  // word는 데이터베이스에 있는 단어 / keyword는 입력한 단어\r\n        var keyLen = keyword.length;\r\n        word = word.toLowerCase().substring(0, keyLen); // 데이터베이스에 있는 단어를 입력한 텍스트의 개수만큼 자른다.\r\n        if (keyword === \"\") return false; // 입력된 텍스트가 없으면 false\r\n        return word === keyword.toString().toLowerCase(); // 데이터베이스에 있는 단어 앞부분과 입력된 텍스트를 비교해서 일치하면 true 아니면 false\r\n    };\r\n\r\n    // select option\r\n    const Options = [\r\n        {value:\"none\", name:\"전체\"},\r\n        {value:\"word\", name:\"단어\"},\r\n        {value:\"mean\", name:\"의미\"},\r\n        {value:\"wordclass\", name:\"품사\"}\r\n    ]\r\n\r\n    //select 구현 및 이벤트 \r\n    const SelectBox = ({options, defaultValue}) => {\r\n        const handleSelect = (e) => {\r\n            setSelected(e.target.value)\r\n        }\r\n        return(\r\n            <select value={Selected} name=\"select\" className=\"form-control\" id=\"select\" onChange={handleSelect}>\r\n                {options.map((options) => (\r\n                    <option key={options.value} value={options.value} defaultValue={defaultValue === options.value}>{options.name}</option>\r\n                ))}\r\n            </select>\r\n        )\r\n    }\r\n\r\n    // 버튼 클릭 이벤트\r\n    const onClick = () => {\r\n        handleInput(Query)\r\n        changeSelected(Selected)\r\n    }\r\n\r\n    // 인덱스 조절\r\n    const decreaseIndex = () => {\r\n\t\tconst nextIndex = idx - 1\r\n\t\tsetIdx(nextIndex < 0 ? 0 : nextIndex)\r\n\t}\r\n\tconst increaseIndex = (autocomplete) => {\r\n\t\tconst nextIndex = idx + 1\r\n\t\tsetIdx(nextIndex > autocomplete - 1 ? autocomplete - 1 : nextIndex)\r\n\t}\r\n\r\n    // 키보드 이벤트\r\n    const onKeyEvent = (e, num) => {\r\n        if (num.length === 0) setIdx(0)\r\n        if (e.key === 'Enter'){\r\n            if (num.length > 0) {\r\n                queryRef.current[idx].click()\r\n                setIdx(0)\r\n            } else {\r\n                onClick()\r\n                setIdx(0)\r\n            }\r\n        } else if (e.keyCode === 38) {\r\n            if (num.length > 0) {\r\n                decreaseIndex()\r\n                queryRef.current[idx].focus()\r\n            }\r\n        } else if (e.keyCode === 40) {\r\n            if (num.length > 0) {\r\n                increaseIndex(num.length)\r\n                queryRef.current[idx].focus()\r\n            }\r\n        } \r\n    }\r\n\r\n    console.log(queryRef.current)\r\n    return (\r\n        <div className=\"searchInner\">\r\n            <div className=\"col-3 selectArea\">\r\n                <SelectBox options={Options} defaultValue=\"none\"/>\r\n            </div>\r\n                <SearchBar \r\n                    keyword={Query} \r\n                    results={results} \r\n                    Selected={Selected}\r\n                    updateField={updateField} \r\n                    onKeyDown={onKeyEvent} \r\n                    textInput={queryRef}\r\n                    autocomplete={queryRef && queryRef.current[idx] ? queryRef.current[idx].innerHTML:''}/>\r\n            <div className=\"col-3 buttonArea\">\r\n                <input \r\n                    type=\"submit\" \r\n                    className=\"form-control\" \r\n                    id=\"submit\" \r\n                    value=\"검색\"\r\n                    onClick={()=>onClick()}\r\n                />\r\n            </div>\r\n        </div>   \r\n    );\r\n}\r\n\r\nexport default Search;","import { Error } from '@material-ui/icons'\r\nimport React from 'react'\r\n\r\nfunction NoResults({exceptionType}) {\r\n    if(exceptionType === 'num'){\r\n        return(\r\n            <div className=\"exceptionArea\">\r\n                <Error className=\"icon\"/>\r\n                <p>검색어에 <span>숫자</span>가 들어있습니다.</p>\r\n                <p>다시 검색해주세요.</p>\r\n            </div>\r\n        )\r\n    }\r\n    else if(exceptionType==='eng'){\r\n        return(\r\n            <div className=\"exceptionArea\">\r\n                <Error className=\"icon\"/>\r\n                <p>검색어에 <span>영어</span>가 들어있습니다.</p>\r\n                <p>다시 검색해주세요.</p>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return(\r\n            <div className='exceptionArea'>\r\n                <Error className=\"icon\"/>\r\n                <p>검색어에 <span>특수문자</span>가 들어있습니다.</p>\r\n                <p>다시 검색해주세요.</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NoResults","import './App.css'\r\nimport React, {Component} from 'react';\r\nimport Result from './components/Result'\r\nimport Search from './components/Search'\r\nimport NoResults from './components/NoResults';\r\n\r\nclass App extends Component{\r\n\r\n    // 생성자 함수\r\n    constructor(props){\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            loading:true,\r\n            words:[],\r\n            Query:'',\r\n            isException:false,\r\n            exceptionType:'',\r\n            selected: 'none'\r\n        }\r\n    }\r\n\r\n    // 컴포넌트가 생성되었을 때 서버에서 데이터 가져오기\r\n    componentDidMount(){\r\n        const BASE_URL = 'https://dictionary-search-haeng.herokuapp.com/api/words';\r\n        fetch(BASE_URL)\r\n        .then(res => res.json())\r\n        .then(result => {\r\n            const {words} = result\r\n            this.setState({loading: false, words})\r\n        })\r\n    }\r\n\r\n    // input에 입력한 값을 버튼 클릭시 동작하도록 하는 이벤트\r\n    handleInput = (keyword) => {\r\n        if(/[a-z]/i.test(keyword))\r\n        this.setState({Query:'',isException:true,exceptionType:'eng'})\r\n        else if(/\\d/.test(keyword))\r\n        this.setState({Query:'',isException:true,exceptionType:'num'})\r\n        else if(/[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|.<>\\/?~]/.test(keyword))\r\n        this.setState({Query:'',isException:true,exceptionType:'str'})\r\n        else\r\n        this.setState({Query: keyword,isException:false});\r\n    }\r\n\r\n    // select에서 선택한 값에 맞춰 state 변경\r\n    changeSelected = (selected) => {\r\n        if (selected === 'none') {\r\n            this.setState({selected: 'none'})\r\n        } else if (selected === 'word') {\r\n            this.setState({selected: 'word'})\r\n        } else if (selected === 'mean') {\r\n            this.setState({selected: 'mean'})\r\n        } else if (selected === 'wordclass') {\r\n            this.setState({selected: 'wordclass'})\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {words, loading, selected, exceptionType, isException} = this.state\r\n\r\n        let filterWords;\r\n        \r\n        if (selected === 'none') { // selelct에서 '전체' 선택 시\r\n            filterWords = this.state.words.filter((word)=>\r\n                word.keyword.includes(this.state.Query)\r\n                || word.meaning.includes(this.state.Query)\r\n                || word.word_class.includes(this.state.Query)\r\n            );\r\n        } else if (selected === 'word') {  // selelct에서 '단어' 선택 시\r\n            filterWords = this.state.words.filter((word)=>\r\n                word.keyword.includes(this.state.Query)\r\n            );\r\n        } else if (selected === 'mean') {  // selelct에서 '의미' 선택 시\r\n            filterWords = this.state.words.filter((word)=>\r\n                word.meaning.includes(this.state.Query)\r\n            );\r\n        } else if (selected === 'wordclass') {  // selelct에서 '품사' 선택 시\r\n            filterWords = this.state.words.filter((word)=>\r\n                word.word_class.includes(this.state.Query)\r\n            );\r\n        }\r\n\r\n        if(loading){ // loading의 상태값이 true이면\r\n            return(\r\n                <div className=\"loaderWrapper\">\r\n                    <div className=\"loader\">loading...</div>\r\n                </div>\r\n            )\r\n        }else{\r\n            return (\r\n                <div className=\"wrapper\">\r\n                    <div className=\"searchArea\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <Search words={words} handleInput={this.handleInput} changeSelected={this.changeSelected}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"resultArea\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"resultInner\" id=\"result\" >\r\n                                {\r\n                                        isException?(\r\n                                            <NoResults exceptionType={exceptionType}/>\r\n                                        ):(filterWords.map(word => {\r\n                                            return(\r\n                                                <Result\r\n                                                key={word._id}\r\n                                                seq={word.seq}\r\n                                                keyword={word.keyword}\r\n                                                link={word.link}\r\n                                                hanja={word.hanja}\r\n                                                word_class={word.word_class}\r\n                                                meaning={word.meaning}\r\n                                                >\r\n                                                </Result>\r\n                                            )\r\n                                        }))\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } \r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}