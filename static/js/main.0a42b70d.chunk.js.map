{"version":3,"sources":["components/Result.js","components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["Result","seq","keyword","link","hanja","word_class","meaning","className","href","Search","props","useState","Query","setQuery","useRef","setSelected","SelectBox","name","id","onChange","e","target","value","console","log","options","map","option","defaultValue","onClick","handleInput","type","placeholder","onFilter","onKeyPress","key","autoFocus","App","changeName","setState","state","loading","words","fetch","then","res","json","result","filterWords","this","filter","word","includes","_id","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAWeA,MATf,YAAmE,IAAlDC,EAAiD,EAAjDA,IAAKC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,QACpD,OACI,sBAAKC,UAAU,eAAf,UACI,sBAAKA,UAAU,OAAf,UAAuBL,EAAQ,8BAAMD,IAAU,mBAAGM,UAAU,QAAb,SAAsBH,IAArE,IAAgF,mBAAGI,KAAML,EAAT,0CAChF,oBAAGI,UAAU,cAAb,UAA2B,+BAAOF,IAAlC,IAAsDC,S,OCwEnDG,MA5Ef,SAAgBC,GAEZ,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,GADiBC,mBACeH,mBAAS,SAAzC,mBAAiBI,GAAjB,WAUMC,EAAY,SAACN,GAKf,OACI,wBAAQO,KAAK,SAASV,UAAU,eAAeW,GAAG,SAASC,SAL1C,SAACC,GAClBL,EAAYK,EAAEC,OAAOC,OACrBC,QAAQC,IAAIJ,EAAEC,OAAOC,QAGrB,SACKZ,EAAMe,QAAQC,KAAI,SAACC,GAAD,OACf,wBAA2BL,MAAOK,EAAOL,MAAOM,aAAclB,EAAMkB,eAAiBD,EAAOL,MAA5F,SAAoGK,EAAOV,MAA9FU,EAAOL,aAgB9BO,EAAU,WACZnB,EAAMoB,YAAYlB,IAQtB,OACI,sBAAKL,UAAU,cAAf,UACI,qBAAKA,UAAU,mBAAf,SAEI,cAACS,EAAD,CAAWS,QA3CP,CACZ,CAACH,MAAM,OAAQL,KAAK,gBACpB,CAACK,MAAM,OAAQL,KAAK,gBACpB,CAACK,MAAM,OAAQL,KAAK,gBACpB,CAACK,MAAM,YAAaL,KAAK,iBAuCYW,aAAa,WAE9C,qBAAKrB,UAAU,kBAAf,SACI,uBAAOwB,KAAK,OACRC,YAAY,0DACZd,GAAG,SACHX,UAAU,eACVY,SAAU,SAACC,GAAD,OAxBT,SAACA,GACdP,EAASO,EAAEC,OAAOC,OAuBSW,CAASb,IACxBc,WAhBG,SAACd,GACH,UAAVA,EAAEe,KAAiBN,KAgBVO,WAAS,MAGjB,qBAAK7B,UAAU,mBAAf,SACI,uBACIwB,KAAK,SACLxB,UAAU,eACVW,GAAG,SACHI,MAAM,eACNO,QAAS,kBAAIA,aCyClBQ,E,kDAxGb,WAAY3B,GAAO,IAAD,6BACda,QAAQC,IAAI,gBACZ,cAAMd,IASV4B,WAAa,WACT,EAAKC,SAAS,CAACtB,KAAK,kBAZN,EA8ChBa,YAAc,SAAC5B,GACX,EAAKqC,SAAS,CAAC3B,MAAOV,KA5CxB,EAAKsC,MAAQ,CACTC,SAAQ,EACRC,MAAM,GACN9B,MAAM,IANI,E,qDAgBlB,WAAoB,IAAD,OAEfW,QAAQC,IAAI,SACZD,QAAQC,IAAI,qBAEZmB,MAJiB,2DAKhBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFxB,QAAQC,IAAIuB,GACZ,IAAOL,EAASK,EAATL,MACP,EAAKH,SAAS,CAACE,SAAS,EAAOC,e,gCAKvC,WACInB,QAAQC,IAAI,Y,kCAIhB,WACID,QAAQC,IAAI,a,oBAahB,WAAS,IAAD,OAGAwB,GADQC,KAAKT,MACCS,KAAKT,MAAME,MAAMQ,QAAO,SAACC,GAAD,OACxCA,EAAKjD,QAAQkD,SAAS,EAAKZ,MAAM5B,WAInC,EAAyBqC,KAAKT,MAAvBC,EAAP,EAAOA,QAAP,EAAgBC,MAChB,OAAGD,EAEK,8BACI,8CAKN,sBAAKlC,UAAU,UAAf,UACI,qBAAKA,UAAU,aAAf,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACI,cAAC,EAAD,CAAQuB,YAAamB,KAAKnB,oBAKtC,qBAAKvB,UAAU,aAAf,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,cAAcW,GAAG,SAAhC,SACK8B,EAAYtB,KAAI,SAAAyB,GACb,OACI,cAAC,EAAD,CAEIlD,IAAKkD,EAAKlD,IACVC,QAASiD,EAAKjD,QACdC,KAAMgD,EAAKhD,KACXC,MAAO+C,EAAK/C,MACZC,WAAY8C,EAAK9C,WACjBC,QAAS6C,EAAK7C,SANT6C,EAAKE,uB,GAtFpCC,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0a42b70d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Result({seq, keyword, link, hanja, word_class, meaning}) {\r\n    return (\r\n        <div className=\"item move-up\">\r\n            <div className=\"word\">{keyword}<sup>{seq}</sup><p className=\"hanja\">{hanja}</p> <a href={link}>더 보기  &raquo;</a></div>\r\n            <p className=\"description\"><span>{word_class}</span> {meaning}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result\r\n","import React, { useRef, useState } from 'react'\r\n\r\nfunction Search(props) {\r\n\r\n    const [Query, setQuery] = useState(\"\"); // value=\"\"와 동일\r\n    const queryRef = useRef();\r\n    const [Selected, setSelected] = useState(\"none\");\r\n\r\n\r\n    //select\r\n    const Options = [\r\n        {value:\"none\", name:\"전체\"},\r\n        {value:\"word\", name:\"단어\"},\r\n        {value:\"mean\", name:\"의미\"},\r\n        {value:\"wordclass\", name:\"품사\"}\r\n    ]\r\n    const SelectBox = (props) => {\r\n        const handleSelect = (e) => { \r\n            setSelected(e.target.value);\r\n            console.log(e.target.value);\r\n        }\r\n        return(\r\n            <select name=\"select\" className=\"form-control\" id=\"select\" onChange={handleSelect}>\r\n                {props.options.map((option) => (\r\n                    <option key={option.value} value={option.value} defaultValue={props.defaultValue === option.value}>{option.name}</option>\r\n                ))}\r\n            </select>\r\n        )\r\n    }\r\n\r\n    // input event\r\n    // const onFiliter = (e) => {\r\n    //     handleInput(e)\r\n    // }\r\n\r\n    // button event\r\n    const onFilter = (e) => {\r\n        setQuery(e.target.value)\r\n    }\r\n\r\n    const onClick = () => {\r\n        props.handleInput(Query)\r\n    }\r\n\r\n    // enter키 이벤트 추가\r\n    const onKeyEvent = (e) => {\r\n        if(e.key === 'Enter'){onClick()}\r\n    }\r\n\r\n    return (\r\n        <div className=\"searchInner\">\r\n            <div className=\"col-3 selectArea\">\r\n                {/* Warning: Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>. */}\r\n                <SelectBox options={Options} defaultValue=\"none\"></SelectBox>\r\n            </div>\r\n            <div className=\"col-6 inputArea\">\r\n                <input type=\"text\" \r\n                    placeholder=\"단어를 입력해주세요\" \r\n                    id=\"search\" \r\n                    className=\"form-control\" \r\n                    onChange={(e)=>onFilter(e)} \r\n                    onKeyPress={onKeyEvent}\r\n                    autoFocus\r\n                    />\r\n            </div>\r\n            <div className=\"col-3 buttonArea\">\r\n                <input \r\n                    type=\"submit\" \r\n                    className=\"form-control\" \r\n                    id=\"submit\" \r\n                    value=\"검색\"\r\n                    onClick={()=>onClick()}\r\n                />\r\n            </div>\r\n        </div>   \r\n    )\r\n}\r\n\r\nexport default Search\r\n","import './App.css'\r\nimport React, {Component, useState, useRef} from 'react';\r\nimport Result from './components/Result'\r\nimport Search from './components/Search';\r\n\r\nclass App extends Component{\r\n  \r\n  // 생성자 함수\r\n  constructor(props){\r\n      console.log('constructor')\r\n      super(props)\r\n      this.state = {\r\n          loading:true,\r\n          words:[],\r\n          Query:''\r\n      }\r\n  }\r\n\r\n  // 이벤트 핸들러 함수\r\n  changeName = () => {\r\n      this.setState({name:\"name changed\"})\r\n  }\r\n\r\n  // 컴포넌트가 생성되었을 때\r\n  componentDidMount(){\r\n      const BASE_URL = 'https://dictionary-search-haeng.herokuapp.com/api/words';\r\n      console.log(\"mount\")\r\n      console.log(\"-----------------\")\r\n      // 서버에서 데이터 가져오기\r\n      fetch(BASE_URL)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n          console.log(result)\r\n          const {words} = result\r\n          this.setState({loading: false, words})\r\n      })\r\n  }\r\n\r\n  // 컴포넌트가 업데이트 되었을 때\r\n  componentDidUpdate(){\r\n      console.log(\"update\")\r\n  }\r\n\r\n  // 컴포넌트가 제거되었을 때\r\n  componentWillUnmount(){\r\n      console.log(\"unmount\")\r\n  }\r\n\r\n    // input에 입력하자마자 검색\r\n    // handleInput = (e) => {\r\n    //     this.setState({Query: e.target.value});\r\n    // }\r\n\r\n    // input에 입력한 값을 버튼 클릭시 동작하도록 하는 이벤트\r\n    handleInput = (keyword) => {\r\n        this.setState({Query: keyword});\r\n    }\r\n\r\n  render(){\r\n\r\n    const Query = this.state;\r\n    const filterWords = this.state.words.filter((word)=>\r\n        word.keyword.includes(this.state.Query)\r\n    );\r\n    \r\n\r\n      const {loading, words} = this.state\r\n      if(loading){ // loading의 상태값이 true이면\r\n          return(\r\n              <div>\r\n                  <h1>loading...</h1>\r\n              </div>\r\n          )\r\n      }else{\r\n          return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"searchArea\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <Search handleInput={this.handleInput}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"resultArea\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"resultInner\" id=\"result\" >\r\n                                {filterWords.map(word => {\r\n                                    return(\r\n                                        <Result\r\n                                            key={word._id}\r\n                                            seq={word.seq}\r\n                                            keyword={word.keyword}\r\n                                            link={word.link}\r\n                                            hanja={word.hanja}\r\n                                            word_class={word.word_class}\r\n                                            meaning={word.meaning}\r\n                                        >\r\n                                        </Result>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          )\r\n      } \r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}